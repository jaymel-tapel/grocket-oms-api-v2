// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleEnum {
  ADMIN
  ACCOUNTANT
  SELLER
}

enum StatusEnum {
  ACTIVE
  DELETED
  BLOCKED
}

enum TaskStatusEnum {
  ACTIVE
  COMPLETED
  DELETED
}

enum LanguageEnum {
  GERMAN
  ENGLISH
}

enum TierEnum {
  FREE
  PREMIUM
  VIP
}

enum CreatedByEnum {
  SELLER
  ACCOUNTANT
  AUTO
}

enum CurrencyEnum {
  USD
  EUR
}

enum OrderCreatedByEnum {
  ADMIN
  ACCOUNTANT
  SELLER
  CLIENT
}

enum PaymentStatusEnum {
  NEW
  SENT_INVOICE
  PR1
  PR2
  PAID
  UNPAID
}

enum OrderEmailTypeEnum {
  BEAUFTRAGT
  WEITERLEITUNG
  GESCHEITERT
}

enum OrderReviewStatus {
  NEU // New
  BEAUFTRAGT // Instructed
  WEITERLEITUNG // Forwarding
  GESCHEITERT // Failed
  WIDERSPRUCH // Contradiction
  GELOSCHT // Deleted
}

enum TaskTypeEnum {
  SENT_INVOICE
  PR1
  PR2
  TWO_MTFU
  UNPAID
}

model User {
  id                   Int              @id @default(autoincrement())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  deletedAt            DateTime?
  name                 String
  email                String
  password             String
  role                 RoleEnum
  forgot_password_code String?
  profile_image        String?
  contact_url          String?
  phone                String?
  status               StatusEnum       @default(ACTIVE)
  alternateEmails      AlternateEmail[]
  clients              Client[]
  orders               Order[]
  tasks                Task[]
  taskNotes            TaskNote[]
}

model AlternateEmail {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  email     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Brand {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  name      String
  code      String
  logo      String?
  address   String?
  currency  CurrencyEnum @default(USD)
  clients   ClientInfo[]
  invoices  Invoice[]
  orders    Order[]
}

model Client {
  id                   Int         @id @default(autoincrement())
  name                 String?
  email                String?
  password             String
  forgot_password_code String?
  seller               User        @relation(fields: [sellerId], references: [id])
  sellerId             Int
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  deletedAt            DateTime?
  clientInfo           ClientInfo?
  tasks                Task[]
  companies            Company[]
  orders               Order[]
}

model ClientInfo {
  id                Int             @id @default(autoincrement())
  clientId          Int             @unique
  sourceId          Int
  industryId        Int?
  brandId           Int             @default(0)
  client            Client          @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  source            ClientSource    @relation(fields: [sourceId], references: [id])
  industry          ClientIndustry? @relation(fields: [industryId], references: [id])
  brand             Brand           @relation(fields: [brandId], references: [id])
  phone             String?
  sentOffer         Boolean?        @default(false)
  hasLoggedIn       Boolean?        @default(false)
  thirdPartyId      String?
  default_unit_cost Decimal?        @default(0.00) @db.Decimal(65, 2)
  status            StatusEnum?     @default(ACTIVE)
  language          LanguageEnum?   @default(GERMAN)
  tier              TierEnum?       @default(FREE)
  profile_url       String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?
}

model Company {
  id           Int           @id @default(autoincrement())
  clientId     Int
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  name         String
  url          String
  valid_url    Boolean       @default(false)
  check_url    Boolean       @default(false)
  latest_check Boolean       @default(false)
  orders       Order[]
  ratings      Rating[]
  dailyRatings DailyRating[]
}

model Order {
  id                  Int                 @id @default(autoincrement())
  clientId            Int
  brandId             Int?
  sellerId            Int                 @default(1)
  companyId           Int
  client              Client              @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seller              User                @relation(fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  company             Company             @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brand               Brand?              @relation(fields: [brandId], references: [id])
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  deletedAt           DateTime?
  order_date          DateTime?           @default(now())
  createdBy           OrderCreatedByEnum?
  send_confirmation   Boolean?            @default(false)
  unit_cost           Decimal             @default(0.00) @db.Money()
  total_price         Decimal             @default(0.00) @db.Money()
  remarks             String?
  payment_status      PaymentStatusEnum?  @default(NEW)
  payment_status_date DateTime?
  date_paid           DateTime?
  invoice_image       String?
  task                Task[]
  orderReviews        OrderReview[]
  orderLogs           OrderLog[]
  invoices            Invoice[]
}

model OrderReview {
  id               Int               @id @default(autoincrement())
  orderId          Int
  order            Order             @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  name             String
  status           OrderReviewStatus @default(NEU)
  google_review_id String?
}

model OrderLog {
  id         Int                 @id @default(autoincrement())
  orderId    Int
  order      Order               @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  by         String
  action     String
  email_type OrderEmailTypeEnum?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  deletedAt  DateTime?
}

model ClientSource {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  clientInfo ClientInfo[]
}

model ClientIndustry {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  clientInfo ClientInfo[]
  prospects  Prospect[]
}

model Task {
  id             Int             @id @default(autoincrement())
  userId         Int
  clientId       Int?
  orderId        Int?
  taskType       TaskTypeEnum?
  createdBy      CreatedByEnum?  @default(AUTO)
  user           User            @relation(fields: [userId], references: [id])
  client         Client?         @relation(fields: [clientId], references: [id])
  order          Order?          @relation(fields: [orderId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  taskSeller     TaskSeller?
  taskAccountant TaskAccountant?
  taskNotes      TaskNote[]
}

model TaskSeller {
  id          Int            @id @default(autoincrement())
  taskId      Int            @unique
  task        Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  title       String
  description String?
  remarks     String?
  status      TaskStatusEnum @default(ACTIVE)
  task_date   DateTime?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
}

model TaskAccountant {
  id          Int            @id @default(autoincrement())
  taskId      Int            @unique
  task        Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  title       String
  description String?
  remarks     String?
  status      TaskStatusEnum @default(ACTIVE)
  task_date   DateTime?
  completedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
}

model TaskNote {
  id        Int      @id @default(autoincrement())
  userId    Int
  taskId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, taskId])
}

model Invoice {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  invoiceId    String?
  orderId      Int
  brandId      Int
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  brand        Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
  review_names String[]
  quantity     Int
  rate         Float
  amount       Decimal  @default(0.00) @db.Money()
}

model Rating {
  id               Int      @id @default(autoincrement())
  date             DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  companyId        Int
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rating           Float
  reviews          Int
  negative_reviews Int
  stars            Int[]
}

model DailyRating {
  id               Int      @id @default(autoincrement())
  date             DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  companyId        Int
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rating           Float
  reviews          Int
  negative_reviews Int
  stars            Int[]
}

model ProspectSession {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  keyword     String
  location    String
  limit       Int
  count       Int
  hasWebsites Boolean
  prospects   Prospect[]
}

model Prospect {
  id               Int              @id @default(autoincrement())
  position         Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  sessionId        Int
  industryId       Int?
  templateId       Int              @default(1)
  name             String
  email            String[]
  url              String?
  phone            String?
  note             String?
  auto_send_email  Boolean          @default(false)
  session          ProspectSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  clientIndustry   ClientIndustry?  @relation(fields: [industryId], references: [id], onDelete: SetNull)
  prospectTemplate ProspectTemplate @relation(fields: [templateId], references: [id], onDelete: Restrict)
  prospectLogs     ProspectLog[]
}

model ProspectTemplate {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  name      String
  subject   String
  content   String?
  prospects Prospect[]
}

model ProspectLog {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  prospectId Int
  prospect   Prospect  @relation(fields: [prospectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  template   String
  by         String
  action     String
}
